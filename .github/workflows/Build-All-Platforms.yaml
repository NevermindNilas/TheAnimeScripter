name: Build-All-Platforms

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13.6"
          cache: "pip"
          cache-dependency-path: requirements.txt

      - name: Extract version
        id: get_version
        run: |
          version=$(python -c 'import src.version; print(src.version.__version__)')
          echo "version=${version}" >> $GITHUB_ENV
          echo "version=${version}" >> $GITHUB_OUTPUT

      - name: Print version
        id: print_version
        run: echo ${{ steps.get_version.outputs.version }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TAS }}
        with:
          tag_name: TAS-${{ steps.get_version.outputs.version }}
          release_name: TAS-${{ steps.get_version.outputs.version }}
          draft: true

  build_windows:
    needs: create_release
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13.6"
          cache: "pip"
          cache-dependency-path: requirements.txt

      - name: Set up setuptools, pip and install requirements
        run: |
          python -m pip install --upgrade pip setuptools wheel
          # install requirements (will be fast when cache is hit)
          if (Test-Path requirements.txt) { python -m pip install -r requirements.txt } else { Write-Host 'requirements.txt not found, skipping'}

      - name: Run full build script
        run: python build.py

      - name: Compress full directory
        run: |
          cd ${{ github.workspace }}/dist-portable/main/
          7z a -t7z -m0=lzma2 -mx=9 -ms=1536m -md=1024m ../../TAS-${{ needs.create_release.outputs.version }}-Windows.7z *

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TAS }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: TAS-${{ needs.create_release.outputs.version }}-Windows.7z
          asset_name: TAS-${{ needs.create_release.outputs.version }}-Windows.7z
          asset_content_type: application/x-7z-compressed

  #build_lite_windows:
  #  needs: create_release
  #  runs-on: windows-latest
  #  steps:
  #    - name: Checkout code
  #      uses: actions/checkout@v4
  #      with:
  #        submodules: recursive
#
  #    - name: Set up Python
  #      uses: actions/setup-python@v2
  #      with:
  #        python-version: "3.13.3"
#
  #    - name: Run lite build script
  #      run: python build-lite.py
#
  #    - name: Compress lite directory
  #      run: |
  #        cd ${{ github.workspace }}/dist-lite/main/
  #        7z a -t7z -m0=lzma2 -mx=9 -ms=1536m -md=1024m ../../TAS-${{ needs.create_release.outputs.version }}-Lite-Windows.7z *
#
  #    - name: Upload Release Asset
  #      id: upload-release-asset
  #      uses: actions/upload-release-asset@v1
  #      env:
  #        GITHUB_TOKEN: ${{ secrets.TAS }}
  #      with:
  #        upload_url: ${{ needs.create_release.outputs.upload_url }}
  #        asset_path: TAS-${{ needs.create_release.outputs.version }}-Lite-Windows.7z
  #        asset_name: TAS-${{ needs.create_release.outputs.version }}-Lite-Windows.7z
  #        asset_content_type: application/x-7z-compressed

  #build_lite_linux:
  #  needs: create_release
  #  runs-on: ubuntu-latest
  #  steps:
  #    - name: Checkout code
  #      uses: actions/checkout@v4
  #      with:
  #        submodules: recursive
#
  #    - name: Set up Python
  #      uses: actions/setup-python@v2
  #      with:
  #        python-version: "3.13.3"
#
  #    - name: Run lite build script
  #      run: python build-linux-lite.py
#
  #    - name: Compress lite directory
  #      run: |
  #        cd ${{ github.workspace }}/dist-lite/main/
  #        7z a -t7z -m0=lzma2 -mx=9 -ms=1536m -md=1024m ../../TAS-${{ needs.create_release.outputs.version }}-Lite-Linux.7z *
#
  #    - name: Upload Release Asset
  #      id: upload-release-asset
  #      uses: actions/upload-release-asset@v1
  #      env:
  #        GITHUB_TOKEN: ${{ secrets.TAS }}
  #      with:
  #        upload_url: ${{ needs.create_release.outputs.upload_url }}
  #        asset_path: TAS-${{ needs.create_release.outputs.version }}-Lite-Linux.7z
  #        asset_name: TAS-${{ needs.create_release.outputs.version }}-Lite-Linux.7z
  #        asset_content_type: application/x-7z-compressed