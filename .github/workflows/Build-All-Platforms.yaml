name: Build-All-Platforms

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13.5"

      - name: Extract version
        id: get_version
        run: |
          version=$(python -c 'import src.version; print(src.version.__version__)')
          echo "version=${version}" >> $GITHUB_ENV
          echo "version=${version}" >> $GITHUB_OUTPUT

      - name: Print version
        id: print_version
        run: echo ${{ steps.get_version.outputs.version }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TAS }}
        with:
          tag_name: TAS-${{ env.version }}
          release_name: TAS-${{ env.version }}
          draft: true

  build_windows:
    needs: create_release
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13.5"

      - name: Set up setuptools and pip
        run: |
          python -m pip install --upgrade pip setuptools wheel

      - name: Run Windows build script
        run: python build.py

      - name: Verify build output
        run: |
          if (Test-Path "dist-portable/main") {
            Write-Host "Build successful - dist-portable/main exists"
            Get-ChildItem "dist-portable/main" -Recurse | Select-Object Name, Length | Format-Table
          } else {
            Write-Error "Build failed - dist-portable/main not found"
            exit 1
          }

      - name: Compress Windows build
        run: |
          cd ${{ github.workspace }}/dist-portable/main/
          7z a -t7z -m0=lzma2 -mx=9 -ms=1536m -md=1024m ../../TAS-${{ needs.create_release.outputs.version }}-Windows.7z *

      - name: Upload Windows Release Asset
        id: upload-windows-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TAS }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: TAS-${{ needs.create_release.outputs.version }}-Windows.7z
          asset_name: TAS-${{ needs.create_release.outputs.version }}-Windows.7z
          asset_content_type: application/x-7z-compressed

  build_linux:
    needs: create_release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13.5"

      - name: Install Linux system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3-dev
          sudo apt-get install -y libavcodec-dev libavformat-dev libavutil-dev libswscale-dev
          
          # VapourSynth compilation dependencies
          sudo apt-get install -y autoconf automake libtool pkg-config
          sudo apt-get install -y gcc g++ make
          sudo apt-get install -y libzimg-dev
          sudo apt-get install -y python3-pip python3-setuptools
          
          # Install Cython for VapourSynth Python bindings
          python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip install cython

      - name: Compile and install VapourSynth from source
        run: |
          # Clone VapourSynth source
          git clone https://github.com/vapoursynth/vapoursynth.git /tmp/vapoursynth
          cd /tmp/vapoursynth
          
          # Configure and compile
          ./autogen.sh
          ./configure --prefix=/usr/local
          make -j$(nproc)
          sudo make install
          
          # Update library paths
          sudo ldconfig
          
          # Set environment variables for VapourSynth
          echo "LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "PYTHONPATH=/usr/local/lib/python$(python3 -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")/site-packages:$PYTHONPATH" >> $GITHUB_ENV
          
          # Test VapourSynth installation
          export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
          export PYTHONPATH=/usr/local/lib/python$(python3 -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")/site-packages:$PYTHONPATH
          python3 -c "import vapoursynth; print('VapourSynth installed successfully:', vapoursynth.__version__)" || echo "VapourSynth test failed"

      - name: Set up setuptools and pip
        run: |
          python -m pip install --upgrade pip setuptools wheel

      - name: Create requirements without VapourSynth for CI
        run: |
          # Create a temporary requirements file without VapourSynth since we compiled it from source
          grep -v "vapoursynth" requirements.txt > requirements-ci.txt
          echo "Created requirements-ci.txt without VapourSynth"
          cat requirements-ci.txt

      - name: Run Linux build script
        run: |
          export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
          export PYTHONPATH=/usr/local/lib/python$(python3 -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")/site-packages:$PYTHONPATH
          export SKIP_VAPOURSYNTH_INSTALL=1
          python build.py

      - name: Verify build output
        run: |
          if [ -d "dist-portable/main" ]; then
            echo "Build successful - dist-portable/main exists"
            ls -la dist-portable/main/
            echo "Checking for run.sh launcher:"
            ls -la dist-portable/main/run.sh || echo "run.sh not found"
          else
            echo "Build failed - dist-portable/main not found"
            exit 1
          fi

      - name: Test Linux build
        run: |
          export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
          export PYTHONPATH=/usr/local/lib/python$(python3 -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")/site-packages:$PYTHONPATH
          
          # Test VapourSynth availability first
          echo "Testing VapourSynth availability..."
          python3 -c "import vapoursynth; print('System VapourSynth version:', vapoursynth.__version__)" || echo "VapourSynth test failed"
          
          cd dist-portable/main/
          if [ -f "run.sh" ]; then
            chmod +x run.sh
            echo "Testing with launcher script..."
            ./run.sh --version || echo "Version check failed, but build may still be valid"
          else
            echo "No run.sh found, testing direct Python execution"
            export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
            export PYTHONPATH=/usr/local/lib/python$(python3 -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")/site-packages:$PYTHONPATH
            ./bin/python3 main.py --version || echo "Direct execution failed"
          fi

      - name: Cleanup temporary files
        run: |
          rm -f requirements-ci.txt

      - name: Compress Linux build
        run: |
          cd ${{ github.workspace }}/dist-portable/main/
          tar -czf ../../TAS-${{ needs.create_release.outputs.version }}-Linux.tar.gz *

      - name: Upload Linux Release Asset
        id: upload-linux-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TAS }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: TAS-${{ needs.create_release.outputs.version }}-Linux.tar.gz
          asset_name: TAS-${{ needs.create_release.outputs.version }}-Linux.tar.gz
          asset_content_type: application/gzip

  #build_lite_windows:
  #  needs: create_release
  #  runs-on: windows-latest
  #  steps:
  #    - name: Checkout code
  #      uses: actions/checkout@v4
  #      with:
  #        submodules: recursive
#
  #    - name: Set up Python
  #      uses: actions/setup-python@v2
  #      with:
  #        python-version: "3.13.3"
#
  #    - name: Run lite build script
  #      run: python build-lite.py
#
  #    - name: Compress lite directory
  #      run: |
  #        cd ${{ github.workspace }}/dist-lite/main/
  #        7z a -t7z -m0=lzma2 -mx=9 -ms=1536m -md=1024m ../../TAS-${{ needs.create_release.outputs.version }}-Lite-Windows.7z *
#
  #    - name: Upload Release Asset
  #      id: upload-release-asset
  #      uses: actions/upload-release-asset@v1
  #      env:
  #        GITHUB_TOKEN: ${{ secrets.TAS }}
  #      with:
  #        upload_url: ${{ needs.create_release.outputs.upload_url }}
  #        asset_path: TAS-${{ needs.create_release.outputs.version }}-Lite-Windows.7z
  #        asset_name: TAS-${{ needs.create_release.outputs.version }}-Lite-Windows.7z
  #        asset_content_type: application/x-7z-compressed

  #build_lite_linux:
  #  needs: create_release
  #  runs-on: ubuntu-latest
  #  steps:
  #    - name: Checkout code
  #      uses: actions/checkout@v4
  #      with:
  #        submodules: recursive
#
  #    - name: Set up Python
  #      uses: actions/setup-python@v2
  #      with:
  #        python-version: "3.13.3"
#
  #    - name: Run lite build script
  #      run: python build-linux-lite.py
#
  #    - name: Compress lite directory
  #      run: |
  #        cd ${{ github.workspace }}/dist-lite/main/
  #        7z a -t7z -m0=lzma2 -mx=9 -ms=1536m -md=1024m ../../TAS-${{ needs.create_release.outputs.version }}-Lite-Linux.7z *
#
  #    - name: Upload Release Asset
  #      id: upload-release-asset
  #      uses: actions/upload-release-asset@v1
  #      env:
  #        GITHUB_TOKEN: ${{ secrets.TAS }}
  #      with:
  #        upload_url: ${{ needs.create_release.outputs.upload_url }}
  #        asset_path: TAS-${{ needs.create_release.outputs.version }}-Lite-Linux.7z
  #        asset_name: TAS-${{ needs.create_release.outputs.version }}-Lite-Linux.7z
  #        asset_content_type: application/x-7z-compressed