name: Build and Lint

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.13'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install linting dependencies only
      run: |
        python -m pip install --upgrade pip
        pip install ruff
    
    - name: Lint and format check with Ruff
      run: |
        ruff check . --output-format=github --statistics || true
        ruff format --check --diff . || true
      continue-on-error: true

  build:
    name: Build
    runs-on: windows-latest
    needs: lint
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if (Test-Path requirements.txt) { pip install -r requirements.txt }
    
    - name: Cache build artifacts
      uses: actions/cache@v4
      with:
        path: |
          dist-*
          build
          *.spec
        key: ${{ runner.os }}-build-${{ hashFiles('build.py', 'requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-build-
    
    - name: Run build
      run: python build.py
    
    - name: Validate build outputs
      run: |
        if (!(Test-Path "dist-*")) {
          Write-Error "No distribution files found"
          exit 1
        }
        Get-ChildItem dist-* -Recurse | Measure-Object -Property Length -Sum
    
    - name: Create artifact name
      id: artifact-name
      run: |
        $timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
        $commit = "${{ github.sha }}".Substring(0,7)
        $artifact_name = "TAS-Build-$timestamp-$commit"
        echo "name=$artifact_name" >> $env:GITHUB_OUTPUT
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.artifact-name.outputs.name }}
        path: |
          dist-*/**
          !dist-*/**/*.log
          !dist-*/**/*.tmp
        retention-days: 7
        if-no-files-found: warn
    
    - name: Upload build logs
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ steps.artifact-name.outputs.name }}
        path: |
          *.log
          build.log
        retention-days: 7
        if-no-files-found: ignore
    
    - name: Report build status
      if: always()
      run: |
        if ($LASTEXITCODE -eq 0) {
          echo "✅ Build completed successfully"
        } else {
          echo "❌ Build failed with exit code $LASTEXITCODE"
        }

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit Security Linter
      run: |
        bandit -r . -f json -o bandit-report.json -ll || true
        bandit -r . -f txt || true
      continue-on-error: true
    
    - name: Run Safety dependency check
      run: |
        safety check --json --output safety-report.json || true
        safety check || true
      continue-on-error: true
    
    - name: Create security artifact name
      id: security-artifact-name
      run: |
        timestamp=$(date +"%Y%m%d-%H%M%S")
        commit="${{ github.sha }}"
        commit_short="${commit:0:7}"
        artifact_name="TAS-Security-$timestamp-$commit_short"
        echo "name=$artifact_name" >> $GITHUB_OUTPUT
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.security-artifact-name.outputs.name }}
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 7
        if-no-files-found: ignore
    
    - name: Security scan summary
      if: always()
      run: |
        echo "🔒 Security scan completed"
        if [ -f bandit-report.json ]; then
          echo "📊 Bandit report generated"
        fi
        if [ -f safety-report.json ]; then
          echo "📊 Safety report generated"
        fi