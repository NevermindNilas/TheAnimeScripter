name: Build and Lint

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.13'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-lint-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint and format check with Ruff
      run: |
        ruff check . --output-format=github || true
        ruff format --check --diff . || true
      continue-on-error: true

  build:
    name: Build
    runs-on: windows-latest
    needs: lint
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-build-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-build-
          ${{ runner.os }}-pip-
    
    - name: Cache build artifacts
      uses: actions/cache@v4
      with:
        path: |
          dist-*
          build
          *.spec
        key: ${{ runner.os }}-build-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-build-
    
    - name: Run build
      run: python build.py
    
    - name: Create artifact name
      id: artifact-name
      run: |
        $timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
        $commit = "${{ github.sha }}".Substring(0,7)
        $artifact_name = "TAS-Build-$timestamp-$commit"
        echo "name=$artifact_name" >> $env:GITHUB_OUTPUT
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.artifact-name.outputs.name }}
        path: |
          dist-*/**
          !dist-*/**/*.log
          !dist-*/**/*.tmp
        retention-days: 7
        if-no-files-found: warn
    
    - name: Upload build logs
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ github.sha }}
        path: |
          *.log
          build.log
        retention-days: 7
        if-no-files-found: ignore