name: Build and Lint

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.13'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install linting dependencies only
      run: |
        python -m pip install --upgrade pip
        pip install ruff
    
    - name: Lint and format check with Ruff
      run: |
        ruff check . --output-format=github --statistics || true
        ruff format --check --diff . || true
      continue-on-error: true

  build:
    name: Build
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    needs: lint
    if: always()
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install Linux system dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential python3-dev
        sudo apt-get install -y libavcodec-dev libavformat-dev libavutil-dev libswscale-dev
        sudo apt-get install -y vapoursynth-dev python3-vapoursynth || echo "VapourSynth not available in repos"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      shell: bash
    
    - name: Cache build artifacts
      uses: actions/cache@v4
      with:
        path: |
          dist-*
          build
          *.spec
          portable-python
        key: ${{ runner.os }}-build-${{ hashFiles('build.py', 'requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-build-
    
    - name: Run build
      run: python build.py
    
    - name: Validate build outputs (Windows)
      if: runner.os == 'Windows'
      run: |
        if (!(Test-Path "dist-*")) {
          Write-Error "No distribution files found"
          exit 1
        }
        Get-ChildItem dist-* -Recurse | Measure-Object -Property Length -Sum

    - name: Validate build outputs (Linux)
      if: runner.os == 'Linux'
      run: |
        if [ ! -d "dist-portable" ]; then
          echo "No distribution files found"
          exit 1
        fi
        du -sh dist-portable/
        ls -la dist-portable/main/ | head -10
    
    - name: Create artifact name
      id: artifact-name
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          timestamp=$(powershell -Command "Get-Date -Format 'yyyyMMdd-HHmmss'")
          commit="${{ github.sha }}"
          commit_short="${commit:0:7}"
          artifact_name="TAS-Build-Windows-$timestamp-$commit_short"
        else
          timestamp=$(date +"%Y%m%d-%H%M%S")
          commit="${{ github.sha }}"
          commit_short="${commit:0:7}"
          artifact_name="TAS-Build-Linux-$timestamp-$commit_short"
        fi
        echo "name=$artifact_name" >> $GITHUB_OUTPUT
      shell: bash
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.artifact-name.outputs.name }}
        path: |
          dist-*/**
          !dist-*/**/*.log
          !dist-*/**/*.tmp
        retention-days: 7
        if-no-files-found: warn
    
    - name: Report build status
      if: always()
      run: |
        if [ $? -eq 0 ]; then
          echo "✅ Build completed successfully on ${{ runner.os }}"
        else
          echo "❌ Build failed on ${{ runner.os }}"
        fi
      shell: bash
  
  
  #security:
  #  name: Security Scan
  #  runs-on: ubuntu-latest
  #  steps:
  #  - uses: actions/checkout@v4
  #  
  #  - name: Set up Python ${{ env.PYTHON_VERSION }}
  #    uses: actions/setup-python@v5
  #    with:
  #      python-version: ${{ env.PYTHON_VERSION }}
  #      cache: 'pip'
  #  
  #  - name: Install security scanning tools
  #    run: |
  #      python -m pip install --upgrade pip
  #      pip install bandit safety
  #  
  #  - name: Run Bandit Security Linter
  #    run: |
  #      bandit -r . -f json -o bandit-report.json -ll || true
  #      bandit -r . -f txt || true
  #    continue-on-error: true
  #  
  #  - name: Run Safety dependency check
  #    run: |
  #      safety scan --output json --save-as safety-report.json || true
  #      safety scan || true
  #    continue-on-error: true
  #  
  #  - name: Create security artifact name
  #    id: security-artifact-name
  #    run: |
  #      timestamp=$(date +"%Y%m%d-%H%M%S")
  #      commit="${{ github.sha }}"
  #      commit_short="${commit:0:7}"
  #      artifact_name="TAS-Security-$timestamp-$commit_short"
  #      echo "name=$artifact_name" >> $GITHUB_OUTPUT
  #  
  #  - name: Upload security reports
  #    uses: actions/upload-artifact@v4
  #    with:
  #      name: ${{ steps.security-artifact-name.outputs.name }}
  #      path: |
  #        bandit-report.json
  #        safety-report.json
  #      retention-days: 7
  #      if-no-files-found: ignore
  #  
  #  - name: Security scan summary
  #    if: always()
  #    run: |
  #      echo "🔒 Security scan completed"
  #      if [ -f bandit-report.json ]; then
  #        echo "📊 Bandit report generated"
  #      fi
  #      if [ -f safety-report.json ]; then
  #        echo "📊 Safety report generated"
  #      fi