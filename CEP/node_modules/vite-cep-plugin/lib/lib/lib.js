"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pause = exports.removeModuleTags = exports.fixAssetPathHTML = exports.fixAssetPathCSS = exports.fixAssetPathJS = exports.posix = exports.safeCreate = exports.removeIfExists = exports.sep = exports.resetLog = exports.log = exports.conColors = void 0;
const os = require("os");
const fs = require("fs-extra");
exports.conColors = {
    white: "\u001b[0m",
    whiteBold: "\u001b[1;37m",
    cyan: "\u001b[1;36m",
    purple: "\u001b[1;35m",
    blue: "\u001b[1;34m",
    yellow: "\u001b[1;33m",
    green: "\u001b[1;32m",
    red: "\u001b[1;31m",
    grey: "\u001b[1;30m",
};
const log = (str, succeeded, info) => {
    const res = succeeded ? "succeeded √" : "failed ×";
    const color = succeeded ? exports.conColors.cyan : exports.conColors.red;
    console.log(`${color}${str} → ${res} ${(info && ":") || ""} ${info || ""}`);
    if (!succeeded)
        throw info;
};
exports.log = log;
const resetLog = () => {
    console.log(exports.conColors.white);
};
exports.resetLog = resetLog;
exports.sep = os.platform() == "win32" ? "\\" : "/";
const removeIfExists = (dir) => {
    try {
        fs.existsSync(dir) && fs.removeSync(dir);
        return [true, "Removed"];
    }
    catch (e) {
        return [false, e];
    }
};
exports.removeIfExists = removeIfExists;
const safeCreate = (dir) => {
    try {
        if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir);
            return [true, "Created"];
        }
        return [true, "Already Exists"];
    }
    catch (e) {
        return [false, e];
    }
};
exports.safeCreate = safeCreate;
const posix = (str) => str.replace(/\\/g, "/");
exports.posix = posix;
const fixAssetPathJS = (code) => {
    code = code.replace(/\=\"\.\/assets/g, `="../assets`);
    code = code.replace(/\=\"\/assets/g, `="../assets`);
    code = code.replace(/\(\"\.\/assets/g, `("../assets`);
    code = code.replace(/\(\"\/assets/g, `("../assets`);
    return code;
};
exports.fixAssetPathJS = fixAssetPathJS;
const fixAssetPathCSS = (code) => {
    code = code.replace(/\(\.\/assets/g, `(../assets`);
    code = code.replace(/\(\/assets/g, `(./`);
    return code;
};
exports.fixAssetPathCSS = fixAssetPathCSS;
const fixAssetPathHTML = (code) => {
    code = code.replace(/\=\"\/assets/g, `="../assets`);
    return code;
};
exports.fixAssetPathHTML = fixAssetPathHTML;
const removeModuleTags = (code) => {
    code = code.replace(/\<link rel=\"modulepreload\" (.*)\>/g, "");
    code = code.replace(/\<script type=\"module\" (.*)\>/g, "");
    return code;
};
exports.removeModuleTags = removeModuleTags;
const pause = (ms) => {
    return new Promise((resolve) => {
        setTimeout(() => resolve(""), ms);
    });
};
exports.pause = pause;
