"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.metaPackage = void 0;
const fs = require("fs");
const path = require("path");
const archiver = require("archiver");
const child_process = require("child_process");
const { execSync } = child_process;
const lib_1 = require("./lib");
const copy_node_1 = require("../copy-node");
const createZip = (src, dst, name) => {
    return new Promise((resolve, reject) => {
        const archive = archiver("zip");
        const zipDest = path.join(dst, `${name}.zip`);
        const output = fs.createWriteStream(zipDest);
        output.on("close", () => {
            // console.log(`zip archive created. ( ${archive.pointer()} bytes )`);
            resolve(zipDest);
        });
        archive.on("error", (err) => {
            reject(err.message);
        });
        archive.pipe(output);
        // append files from a sub-directory, putting its contents at the root of archive
        archive.directory(src, false);
        // append files from a sub-directory and naming it `new-subdir` within the archive
        //   archive.directory(dst, "new-subdir");
        archive.finalize();
    });
};
const metaPackage = (config, dest, zxp, src, assets) => __awaiter(void 0, void 0, void 0, function* () {
    const tmpDir = path.join(dest, "tmp");
    console.log({
        dest,
        zxp,
        src,
        assets,
    });
    fs.mkdirSync(tmpDir, { recursive: true });
    fs.copyFileSync(zxp, path.join(tmpDir, path.basename(zxp)));
    if (assets) {
        (0, copy_node_1.copyFiles)({
            src,
            dest: tmpDir,
            assets,
        });
    }
    const zip = yield createZip(tmpDir, dest, `${config.displayName}_${config.version}`);
    (0, lib_1.log)("built zip", true, zip);
    fs.rmSync(tmpDir, { recursive: true });
    (0, lib_1.resetLog)();
    return zip;
});
exports.metaPackage = metaPackage;
