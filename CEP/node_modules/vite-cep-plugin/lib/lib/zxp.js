"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.signZXP = void 0;
const os = require("os");
const path = require("path");
const child_process = require("child_process");
const { execSync } = child_process;
const lib_1 = require("./lib");
const fs_1 = require("fs");
const signZXP = (config, input, zxpDir, tmpDir) => __awaiter(void 0, void 0, void 0, function* () {
    const zxpCmd = os.platform() == "win32" ? `ZXPSignCmd` : `./ZXPSignCmd`;
    const name = config.id;
    const data = config.zxp;
    const output = path.join(zxpDir, `${name}.zxp`);
    const certPath = path.join(tmpDir, `${name}-cert  `);
    const signPrepStr = `${zxpCmd} -selfSignedCert ${data.country} ${data.province} ${data.org} ${name} ${data.password} "${certPath}"`;
    const signStr = `${zxpCmd} -sign "${input}" "${output}" "${certPath}" ${data.password} -tsa ${data.tsa}`;
    const cwdDir = path.join(__dirname, "..", "bin");
    (0, lib_1.removeIfExists)(output);
    (0, lib_1.safeCreate)(zxpDir);
    console.log({ signPrepStr });
    execSync(signPrepStr, { cwd: cwdDir, encoding: "utf-8" });
    console.log({ signStr });
    const jsx = path.join(input, "jsx");
    let waits = 1;
    while (!(0, fs_1.existsSync)(jsx) || (0, fs_1.readdirSync)(jsx).length === 0) {
        console.log(`waiting for ExtendScript to finish... ${100 * waits++}ms`);
        yield (0, lib_1.pause)(100);
    }
    execSync(signStr, { cwd: cwdDir, encoding: "utf-8" });
    (0, lib_1.log)("built zxp", true, output);
    return output;
});
exports.signZXP = signZXP;
