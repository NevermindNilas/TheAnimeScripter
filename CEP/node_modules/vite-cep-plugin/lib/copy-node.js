"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.copyFiles = exports.copyModules = exports.unique = void 0;
const path = require("path");
const fs = require("fs-extra");
const unique = (array) => {
    return array.filter((v, i, a) => a.indexOf(v) === i);
};
exports.unique = unique;
const nodeSolve = ({ src, pkg, keepDevDependencies }) => {
    let allDependencies = [pkg];
    const fullPath = path.join(src, "node_modules", pkg);
    // console.log(`getting pkgs for ${fullPath}`);
    const pkgJson = path.join(fullPath, "package.json");
    if (fs.existsSync(pkgJson)) {
        const raw = fs.readFileSync(pkgJson, { encoding: "utf-8" });
        const json = JSON.parse(raw);
        let { dependencies, devDependencies } = json;
        const depList = dependencies ? Object.keys(dependencies) : [];
        const devDepList = devDependencies ? Object.keys(devDependencies) : [];
        const resDepList = keepDevDependencies
            ? depList.concat(devDepList)
            : depList;
        if (resDepList.length > 0) {
            allDependencies = allDependencies.concat(resDepList);
            resDepList.map((name) => {
                allDependencies = allDependencies.concat(nodeSolve({ src, pkg: name, keepDevDependencies }));
            });
        }
    }
    return allDependencies || [];
};
const copyModules = ({ packages, src, dest, symlink, }) => {
    const allPkg = packages.flatMap((pkg) => nodeSolve({ src, pkg, keepDevDependencies: false }));
    const uniqePkg = (0, exports.unique)(allPkg);
    console.log(`Copying ${packages.length} Node Module(s) (${uniqePkg.length} Dependencies) : ${packages.join(",")}`);
    fs.ensureDirSync(path.join(dest, "node_modules"));
    uniqePkg.map((pkg) => {
        const fullSrcPath = path.join(process.cwd(), src, "node_modules", pkg);
        const fullDstPath = path.join(process.cwd(), dest, "node_modules", pkg);
        fs.ensureDirSync(path.dirname(fullDstPath));
        if (!symlink) {
            fs.copySync(fullSrcPath, fullDstPath, { dereference: true });
        }
        else {
            fs.ensureSymlink(fullSrcPath, fullDstPath, "dir");
        }
    });
};
exports.copyModules = copyModules;
const copyFiles = ({ src, dest, assets }) => {
    console.log(`Copying ${assets.length} Assets`);
    // fs.ensureDirSync(path.join(dest, "node_modules"));
    assets.map((asset) => {
        const fullSrcPath = path.join(src, asset);
        if (asset.indexOf("/*") === asset.length - 2) {
            // flatten folder
            const folder = asset.substring(0, asset.length - 2);
            const files = fs.readdirSync(path.join(src, folder));
            files.map((file) => {
                const fullSrcPath = path.join(src, folder, file);
                const fullDstPath = path.join(dest, file);
                console.log(`COPY ${fullSrcPath} to ${fullDstPath}`);
                fs.ensureDirSync(path.dirname(fullDstPath));
                fs.copySync(fullSrcPath, fullDstPath);
            });
        }
        else {
            const fullDstPath = path.join(dest, asset);
            console.log(`COPY ${fullSrcPath} to ${fullDstPath}`);
            fs.ensureDirSync(path.dirname(fullDstPath));
            fs.copySync(fullSrcPath, fullDstPath);
        }
    });
};
exports.copyFiles = copyFiles;
const rollupNodeCopyPlugin = ({ packages, src, dest, symlink, }) => {
    return {
        name: "copy-node-modules",
        buildEnd: () => __awaiter(void 0, void 0, void 0, function* () {
            (0, exports.copyModules)({ packages, src, dest, symlink });
        }),
    };
};
exports.default = rollupNodeCopyPlugin;
