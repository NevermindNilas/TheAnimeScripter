import { Plugin } from "rollup";
import type { HtmlTagDescriptor, ResolvedConfig } from "vite";
import { CEP_Config, JSXBIN_MODE } from "./cep-config";
export type { CEP_Config };
interface CepOptions {
    cepConfig: CEP_Config;
    dir: string;
    isProduction: boolean;
    isPackage: boolean;
    isMetaPackage: boolean;
    debugReact: boolean;
    isServe: boolean;
    cepDist: string;
    zxpDir: string;
    zipDir: string;
    packages: string[];
}
export declare const cep: (opts: CepOptions) => {
    name: string;
    transformIndexHtml(code: string, opts: any): HtmlTagDescriptor[] | {
        tags: HtmlTagDescriptor[];
        html: string;
    };
    configResolved(config: ResolvedConfig | any): void;
    writeBundle(): Promise<void>;
    generateBundle(output: any, bundle: any): Promise<void>;
};
export declare const jsxInclude: ({ iife, globalThis, }: {
    iife: boolean;
    globalThis: string;
}) => Plugin | any;
interface PonyFillItem {
    find: string;
    replace: string;
    inject: string;
}
export declare const jsxPonyfill: (extraPonyfills?: PonyFillItem[] | undefined) => Plugin | any;
export declare const runAction: (opts: CepOptions, action: string) => void;
export declare const jsxBin: (jsxBinMode?: JSXBIN_MODE | undefined) => {
    name: string;
    generateBundle: (output: any, bundle: any) => Promise<void>;
};
