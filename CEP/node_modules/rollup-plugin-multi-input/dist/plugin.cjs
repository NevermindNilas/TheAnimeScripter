"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: ()=>_default
});
const _fastGlob = /*#__PURE__*/ _interopRequireDefault(require("fast-glob"));
const _path = /*#__PURE__*/ _interopRequireDefault(require("path"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const pluginName = 'rollup-plugin-multi-input';
const isString = (value)=>typeof value === 'string';
/**
 * default multi-input Options
 * */ const defaultOptions = {
    // `path.sep` is used for windows support
    relative: `src${_path.default.sep}`
};
// extract the output file name from a file name
const outputFileName = (filePath)=>filePath.replace(/\.[^/.]+$/, '').replace(/\\/g, '/');
/**
 *  multiInput is a rollup plugin to use multiple entry point and preserve the directory
 *  structure in the dist folder
 * */ const multiInput = (options = defaultOptions)=>{
    const { glob: globOptions , relative =defaultOptions.relative , transformOutputPath  } = options;
    return {
        name: pluginName,
        options (conf) {
            // flat to enable input to be a string or an array
            const inputs = [
                conf.input
            ].flat();
            // separate globs inputs string from others to enable input to be a mixed array too
            const globs = inputs.filter(isString);
            const others = inputs.filter((value)=>!isString(value));
            const normalizedGlobs = globs.map((glob)=>glob.replace(/\\/g, '/'));
            // get files from the globs strings and return as a Rollup entries Object
            const entries = _fastGlob.default.sync(normalizedGlobs, globOptions).map((name)=>{
                const filePath = _path.default.relative(relative, name);
                const isRelative = !filePath.startsWith(`..${_path.default.sep}`);
                const relativeFilePath = isRelative ? filePath : _path.default.relative(`.${_path.default.sep}`, name);
                if (transformOutputPath) {
                    return [
                        outputFileName(transformOutputPath(relativeFilePath, name)),
                        name
                    ];
                }
                return [
                    outputFileName(relativeFilePath),
                    name
                ];
            });
            const input = Object.assign({}, Object.fromEntries(entries), // add no globs input to the result
            ...others);
            // return the new configuration with the glob input and the non string inputs
            return {
                ...conf,
                input
            };
        }
    };
};
const _default = multiInput;

